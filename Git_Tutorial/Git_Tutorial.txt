<깃 환경설정>

git config --global user,name ''
git config --global user.email ''


<디렉토리 변경>

cd C:/Educaiton

<클론>

git clone https://github.com/swjh9523/Git---Tutorial.git(깃허브 링크)

<커밋하는법>
c:\Education>cd Git---Tutorial

c:\Education\Git---Tutorial>git add document.txt

c:\Education\Git---Tutorial>git commit -m "Add Text File [document.txt]"

git push


<소스코드 수정 후 반영하기>

git status 로 확인해보기 <- 수정 반영된 내용 확인.

git reset < - add 내역 지우기

git add . <- 바뀐 내용 모두 반영하기

git checkout --<file> 수정내역 무시하고 원래대로 되돌리기

<커밋 메세지 수정>

git commit --amend후 실행되는 에디터에서 A를 누르고 커밋 메세지 수정 / esc를 누르고 :wq!를 입력하면 수정된 내역 저장 후 빠져 나올수 있다.

git pull

git log <- 커밋 내역 확인하기 / q를 이용해 빠져나오기

git reset --hard / soft / mixed 후 git push -f로 푸쉬하기

<Git 브랜치>

Git은 동시에 여러 개발자들이 프로젝트에서 각기 다른 기능을 개발할 수 있도록 브랜치기능을 제공함. 서로 다른 브랜치는 작업을 함에 있어서 서로에게 영향을 받지 않는다는 점에서 마음 놓고 서로 다른 개발 작업을 수행할 수 있다.
기본적으로 Git 저장소를 만들면 자동으로 Master 브랜치가 생성됨. 이는 일반적으로 배포가 가능한 수준의 안정회된 버전을 포함하고 있다.
그래서 별도의 브랜치를 만들어 사용하고자 한다면 체크아웃 명령어를 이용해야함.

통합 브랜치 : 배포가 가능한 수준의 브랜치로 일반적으로 마스터 브랜치를 의미함.
토픽 브랜치 : 특정한 기능을 위해 만들어진 브랜치로 일반적으로 마스터 브랜치 이외의 다른 브랜치를 의미함.

<브랜치 사용해보기>

git branch <- 기본적으로 몇개의 브랜치가 있는지 확인

git branch develop <- develop 브랜치 생성하기

git checkout develop <- develop 브랜치 사용하기

git checkout master > git merge develop <- 마스터 브랜치에서 develop 브랜치와 합치기.

git branch -d develop <- 병합을 마쳤다면 develop 브랜치의 역할은 다 했기 때문에 제거해주기.